"use strict";(self.webpackChunkTodo_list=self.webpackChunkTodo_list||[]).push([[179],{44:(t,n,e)=>{e.d(n,{Z:()=>f});var o=e(537),r=e.n(o),i=e(645),a=e.n(i),s=e(667),c=e.n(s),A=new URL(e(289),e.b),d=new URL(e(862),e.b),l=new URL(e(599),e.b),u=new URL(e(309),e.b),p=a()(r()),C=c()(A),b=c()(d),h=c()(l),g=c()(u);p.push([t.id,'.control{display:block;position:relative;padding-left:28px;margin-bottom:0;padding-top:2px;cursor:pointer;font-size:19px}.control input{position:absolute;z-index:-1;opacity:0}.control-indicator{position:absolute;top:3px;left:0;height:20px;width:21px;background:#e6e6e6;border:0 solid #000;border-radius:0}.control input:checked~.control-indicator{background:#3c6c78}.control:hover input~.control-indicator,.control input:focus~.control-indicator{background:#ccc}.control input:disabled~.control-indicator{background:#e6e6e6;opacity:.6;pointer-events:none}.control input:checked:focus~.control-indicator,.control:hover input:not([disabled]):checked~.control-indicator{background:#0e6647}.control-indicator::after{box-sizing:unset;content:"";position:absolute;display:none}.control-checkbox .control-indicator::after{left:6px;top:1px;width:5px;height:10px;border:solid #fff;border-width:0 4px 4px 0;transform:rotate(45deg)}.control input:checked~.control-indicator::after{display:block}.control-checkbox input:disabled~.control-indicator::after{border-color:#7b7b7b}.control-checkbox .control-indicator::before{content:"";display:block;position:absolute;left:0;top:0;width:4.5rem;height:4.5rem;margin-left:-1.5rem;margin-top:-1.5rem;background:#2aa1c0;border-radius:3rem;opacity:.6;z-index:99999;transform:scale(0)}.flex{display:flex}.justify-between{justify-content:space-between}.justify-center{justify-content:center}.items-center{align-items:center}.bg-white{background-color:#fff}.bg-light-yellow{background-color:#ffb}.bg-light-gray{background-color:#eee}.text-gray{color:#555}.bg-inherit{background-color:inherit}.h-full{height:100%}.w-full{width:100%}.p-1{padding:1rem}.mr-05{margin-right:.5rem}.border-0{border:none}.border-b-1{border-bottom:1px solid #777}.shadow{box-shadow:2px 20px 25px -5px rgba(1,1,2,.2),0 10px 10px -6px rgba(1,1,2,.2)}.del{text-decoration:line-through}*{box-sizing:border-box;padding:0;margin:0}a{text-decoration:none;color:inherit}ul{list-style:none;padding-inline-start:0}body{font-family:sans-serif;background:#eee;height:100vh}button{cursor:pointer}button:hover{color:#333}.tasks{width:80vh}.task{transition:all .2s ease-in;cursor:move}.task.dragged{background-color:#ffe !important}@media screen and (min-width: 768px){.tasks{width:35vw}}.task-input{font-size:16px;width:100%;height:100%;border:0;outline:0}.task-text{position:static !important;opacity:1 !important;z-index:1 !important;font-size:16px;width:100%;height:100%;outline:0;border:0;background-color:inherit;color:inherit}.icon{display:inline-block;width:20px;height:20px;background-size:cover}.icon:hover,.icon:focus{filter:brightness(10%)}.icon-dots{background-image:url('+C+")}.icon-reload{background-image:url("+b+")}.icon-enter{background-image:url("+h+")}.icon-delete{background-image:url("+g+")}","",{version:3,sources:["webpack://./src/scss/_checkbox.scss","webpack://./src/scss/_utilities.scss","webpack://./src/scss/_variables.scss","webpack://./src/scss/index.scss"],names:[],mappings:"AAAA,SACE,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,eAAA,CACA,eAAA,CACA,cAAA,CACA,cAAA,CAGF,eACE,iBAAA,CACA,UAAA,CACA,SAAA,CAGF,mBACE,iBAAA,CACA,OAAA,CACA,MAAA,CACA,WAAA,CACA,UAAA,CACA,kBAAA,CACA,mBAAA,CACA,eAAA,CAGF,0CACE,kBAAA,CAGF,gFAEE,eAAA,CAGF,2CACE,kBAAA,CACA,UAAA,CACA,mBAAA,CAGF,gHAEE,kBAAA,CAGF,0BACE,gBAAA,CACA,UAAA,CACA,iBAAA,CACA,YAAA,CAGF,4CACE,QAAA,CACA,OAAA,CACA,SAAA,CACA,WAAA,CACA,iBAAA,CACA,wBAAA,CACA,uBAAA,CAGF,iDACE,aAAA,CAGF,2DACE,oBAAA,CAGF,6CACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,MAAA,CACA,KAAA,CACA,YAAA,CACA,aAAA,CACA,mBAAA,CACA,kBAAA,CACA,kBAAA,CACA,kBAAA,CACA,UAAA,CACA,aAAA,CACA,kBAAA,CCpFF,MACE,YAAA,CAGF,iBACE,6BAAA,CAGF,gBACE,sBAAA,CAGF,cACE,kBAAA,CAKF,UACE,qBCnBM,CDsBR,iBACE,qBClBa,CDqBf,eACE,qBC1BO,CD6BT,WACE,UC5BK,CD+BP,YACE,wBAAA,CAKF,QACE,WC7BO,CDgCT,QACE,UCjCO,CDoCT,KACE,YCtCK,CDyCP,OACE,kBC3CM,CDgDR,UACE,WAAA,CAGF,YACE,4BAAA,CAKF,QACE,4EAAA,CAKF,KACE,4BAAA,CEpEF,EACE,qBAAA,CACA,SAAA,CACA,QAAA,CAGF,EACE,oBAAA,CACA,aAAA,CAGF,GACE,eAAA,CACA,sBAAA,CAKF,KACE,sBAAA,CACA,eD1BO,CC2BP,YAAA,CAGF,OACE,cAAA,CAGF,aACE,UDhCM,CCqCR,OACE,UAAA,CAGF,MACE,0BAAA,CACA,WAAA,CAGF,cACE,gCAAA,CAGF,qCACE,OACE,UAAA,CAAA,CAIJ,YACE,cAAA,CACA,UAAA,CACA,WAAA,CACA,QAAA,CACA,SAAA,CAGF,WACE,0BAAA,CACA,oBAAA,CACA,oBAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CACA,SAAA,CACA,QAAA,CACA,wBAAA,CACA,aAAA,CAGF,MACE,oBAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CAGF,wBAEE,sBAAA,CAGF,WACE,wDAAA,CAGF,aACE,wDAAA,CAGF,YACE,wDAAA,CAGF,aACE,wDAAA",sourcesContent:['.control {\n  display: block;\n  position: relative;\n  padding-left: 28px;\n  margin-bottom: 0;\n  padding-top: 2px;\n  cursor: pointer;\n  font-size: 19px;\n}\n\n.control input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n}\n\n.control-indicator {\n  position: absolute;\n  top: 3px;\n  left: 0;\n  height: 20px;\n  width: 21px;\n  background: #e6e6e6;\n  border: 0 solid #000;\n  border-radius: 0;\n}\n\n.control input:checked ~ .control-indicator {\n  background: #3c6c78;\n}\n\n.control:hover input ~ .control-indicator,\n.control input:focus ~ .control-indicator {\n  background: #ccc;\n}\n\n.control input:disabled ~ .control-indicator {\n  background: #e6e6e6;\n  opacity: 0.6;\n  pointer-events: none;\n}\n\n.control input:checked:focus ~ .control-indicator,\n.control:hover input:not([disabled]):checked ~ .control-indicator {\n  background: #0e6647;\n}\n\n.control-indicator::after {\n  box-sizing: unset;\n  content: "";\n  position: absolute;\n  display: none;\n}\n\n.control-checkbox .control-indicator::after {\n  left: 6px;\n  top: 1px;\n  width: 5px;\n  height: 10px;\n  border: solid #fff;\n  border-width: 0 4px 4px 0;\n  transform: rotate(45deg);\n}\n\n.control input:checked ~ .control-indicator::after {\n  display: block;\n}\n\n.control-checkbox input:disabled ~ .control-indicator::after {\n  border-color: #7b7b7b;\n}\n\n.control-checkbox .control-indicator::before {\n  content: "";\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-left: -1.5rem;\n  margin-top: -1.5rem;\n  background: #2aa1c0;\n  border-radius: 3rem;\n  opacity: 0.6;\n  z-index: 99999;\n  transform: scale(0);\n}\n',"// Flexbox\n\n.flex {\n  display: flex;\n}\n\n.justify-between {\n  justify-content: space-between;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.items-center {\n  align-items: center;\n}\n\n// Colors\n\n.bg-white {\n  background-color: $white;\n}\n\n.bg-light-yellow {\n  background-color: $light-yellow;\n}\n\n.bg-light-gray {\n  background-color: $gray-1;\n}\n\n.text-gray {\n  color: $gray;\n}\n\n.bg-inherit {\n  background-color: inherit;\n}\n\n// Sizing\n\n.h-full {\n  height: $s-full;\n}\n\n.w-full {\n  width: $s-full;\n}\n\n.p-1 {\n  padding: $s-b1;\n}\n\n.mr-05 {\n  margin-right: $s-b05;\n}\n\n// Borders\n\n.border-0 {\n  border: none;\n}\n\n.border-b-1 {\n  border-bottom: $s-s1 solid $gray-7;\n}\n\n// Shadows\n\n.shadow {\n  box-shadow: 2px 20px 25px -5px rgb(1 1 2 / 20%), 0 10px 10px -6px rgb(1 1 2 / 20%);\n}\n\n// Text formating\n\n.del {\n  text-decoration: line-through;\n}\n","// Colors\n\n$white: #fff;\n$gray-1: #eee;\n$gray-7: #777;\n$gray: #555;\n$black: #333;\n$light-yellow: #ffb;\n\n// Sizes\n\n$s-s1: 1px;\n$s-b05: 0.5rem;\n$s-b1: 1rem;\n$s-full: 100%;\n",'// Feel free to change the styles in this file as you wish.\n\n// Variables\n@import "./variables";\n@import "./checkbox";\n@import "./utilities";\n\n// Normalize\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\na {\n  text-decoration: none;\n  color: inherit;\n}\n\nul {\n  list-style: none;\n  padding-inline-start: 0;\n}\n\n// General styling\n\nbody {\n  font-family: sans-serif;\n  background: $gray-1;\n  height: 100vh;\n}\n\nbutton {\n  cursor: pointer;\n}\n\nbutton:hover {\n  color: $black;\n}\n\n// Custom Styling\n\n.tasks {\n  width: 80vh;\n}\n\n.task {\n  transition: all 0.2s ease-in;\n  cursor: move;\n}\n\n.task.dragged {\n  background-color: #ffe !important;\n}\n\n@media screen and (min-width: 768px) {\n  .tasks {\n    width: 35vw;\n  }\n}\n\n.task-input {\n  font-size: 16px;\n  width: 100%;\n  height: 100%;\n  border: 0;\n  outline: 0;\n}\n\n.task-text {\n  position: static !important;\n  opacity: 1 !important;\n  z-index: 1 !important;\n  font-size: 16px;\n  width: 100%;\n  height: 100%;\n  outline: 0;\n  border: 0;\n  background-color: inherit;\n  color: inherit;\n}\n\n.icon {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  background-size: cover;\n}\n\n.icon:hover,\n.icon:focus {\n  filter: brightness(10%);\n}\n\n.icon-dots {\n  background-image: url("../icons/dots.svg");\n}\n\n.icon-reload {\n  background-image: url("../icons/reload.svg");\n}\n\n.icon-enter {\n  background-image: url("../icons/enter.svg");\n}\n\n.icon-delete {\n  background-image: url("../icons/delete.svg");\n}\n'],sourceRoot:""}]);const f=p},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var A=0;A<t.length;A++){var d=[].concat(t[A]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},667:t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],A=o.base?c[0]+o.base:c[0],d=i[A]||0,l="".concat(A," ").concat(d);i[A]=d+1;var u=e(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var C=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:l,updater:C,references:1})}a.push(l)}return a}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var c=o(t,r),A=0;A<i.length;A++){var d=e(i[A]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},830:(t,n,e)=>{var o=e(379),r=e.n(o),i=e(795),a=e.n(i),s=e(569),c=e.n(s),A=e(565),d=e.n(A),l=e(216),u=e.n(l),p=e(589),C=e.n(p),b=e(44),h={};h.styleTagTransform=C(),h.setAttributes=d(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=u(),r()(b.Z,h),b.Z&&b.Z.locals&&b.Z.locals;class g{constructor(t,n,e=!1){this.id=`id-${Math.round(1e6*Math.random())}`,this.description=t,this.complete=e,this.index=n}}const f=(t,n)=>{const e=document.createRange().createContextualFragment(t);document.querySelector(n).appendChild(e)},m=(t,n)=>{localStorage.setItem(n,JSON.stringify(t))},k=t=>{for(let n=0;n<t.length;n+=1)f(`\n    <li id="${t[n].id}" class="task p-1 text-gray border-b-1 flex justify-between items-center" \n    data-index="${t[n].index}" tabindex="0" draggable="true">\n      <div class="w-full">\n        <label class="control control-checkbox" for="task-${n}">\n          <div class="w-full">\n            <del>\n            <input type="text" data-input-id="${t[n].id}" \n            class="task-text ${t[n].complete?"del":""}" value="${t[n].description}" disabled />\n      </del>\n          </div>\n          <input type="checkbox" data-check-id="${t[n].id}" ${t[n].complete?"checked":""} />\n          <div class="control-indicator"></div>\n        </label>\n      </div>\n      <button data-btn-id="${t[n].id}" \n      class="flex items-center border-0 bg-inherit" data-status="edit"><span class="icon icon-dots" /></button>\n    </li>`,"#list")},x=t=>{const n=document.querySelector(`#${t}`),e=document.querySelector(`[data-check-id="${t}"]`),o=document.querySelector(`[data-input-id="${t}"]`),r=document.querySelector(`[data-btn-id="${t}"]`);return{task:n,checkbox:e,text:o,btn:r,icon:r.firstChild}},v=document.querySelector("#list"),y=document.querySelector("#add-task"),w=document.querySelector("#btn-delete-done-tasks"),E=new class{constructor(){this.tasks=[],this.tasks=(t=>{const n=JSON.parse(localStorage.getItem("tasks")),e=[];if(n)for(let t=0;t<n.length;t+=1)e.push(n[t]);return e})()}add(t){this.tasks.push(t),m(this.tasks,"tasks")}delete(t){this.tasks=this.tasks.filter((n=>n.id!==t)),this.#t(),m(this.tasks,"tasks")}update(t){for(let n=0;n<this.tasks.length;n+=1)this.tasks[n].id===t.id&&(this.tasks[n].index=t.index,this.tasks[n].title=t.title,this.tasks[n].complete=t.complete,m(this.tasks,"tasks"))}sortByDomIndex(t){const n=[];Object.values(t).forEach((t=>{n.push(t.getAttribute("data-index"))}));const e=[];for(let t=0;t<n.length;t+=1){const o=this.tasks.filter((e=>Number(n[t])===e.index))[0];e.push(o)}this.tasks=e,this.#t(),m(this.tasks,"tasks")}#t(){const t=[];for(let t=0;t<this.tasks.length;t+=1)this.tasks[t].index=t;let n=0;for(;n<this.tasks.length;){const e=n;t.push(this.tasks.filter((t=>t.index===e))[0]),n+=1}this.tasks=t}};let{tasks:B}=E;const F=()=>{v.childNodes.forEach((t=>{((t,n)=>{document.querySelector("#list").addEventListener("dragover",(t=>{t.preventDefault()})),t.addEventListener("dragstart",(t=>{t.target.classList.add("dragged")})),t.addEventListener("dragend",(t=>{t.target.classList.remove("dragged")})),t.addEventListener("drop",(t=>{((t,e)=>{const o=document.querySelector(`[data-index="${t}"]`),r=document.querySelector(`[data-index="${e}"]`);o.parentNode.insertBefore(o,r),n.sortByDomIndex(r.parentNode.children),o.setAttribute("data-index",e),r.setAttribute("data-index",t)})(+document.querySelector(".dragged").getAttribute("data-index"),+t.target.closest("li").getAttribute("data-index"))}))})(t,E)}))};y.addEventListener("submit",(t=>{t.preventDefault();const n=document.querySelector("#task-input");if(!n.value.trim())return;const e=new g(n.value,B.length,!1);E.add(e),v.innerHTML="",k(B),y.reset(),F()})),window.onload=()=>{k(B),F()};const $=()=>{B=E.tasks,v.innerHTML="",k(B)},S=t=>B.filter((n=>n.id===t))[0];let G;document.addEventListener("click",(t=>{if(t.target.classList.contains("control-indicator")){const n=t.target.parentElement.children[1];n.checked?n.checked=!1:n.checked=!0;const e=S(n.getAttribute("data-check-id"));e.complete=n.checked,E.update(e),$()}G&&!G.contains(t.target)&&((t=>{if(t){const{task:n,text:e,btn:o,icon:r}=x(t);r.classList.add("icon-dots"),r.classList.remove("icon-delete"),n.classList.remove("bg-light-yellow"),n.classList.add("bg-white"),e.setAttribute("disabled",!0),o.setAttribute("data-status","edit"),n.blur()}})(G.getAttribute("id")),G="");const n=t.target.parentElement,e=n.getAttribute("data-btn-id");if("delete"===n.getAttribute("data-status")&&t.target===n.firstChild)return E.delete(e),$(),void(G="");if(e){const t=(t=>{if(t){const{task:n,text:e,btn:o,icon:r}=x(t);return r.classList.remove("icon-dots"),r.classList.add("icon-delete"),n.classList.add("bg-light-yellow"),e.removeAttribute("disabled"),o.setAttribute("data-status","delete"),n.focus(),n}return!1})(e);t&&(G=t)}F()})),document.addEventListener("input",(t=>{const n=t.target,e=n.getAttribute("data-input-id");if(e){const t=S(e);t.description=n.value,E.update(t)}})),w.addEventListener("click",(()=>{for(let t=0;t<B.length;t+=1)B[t].complete&&E.delete(B[t].id);$()}))},309:(t,n,e)=>{t.exports=e.p+"1bf1ab0cd47f89f6ecb3.svg"},289:(t,n,e)=>{t.exports=e.p+"fabadba423626466eb2d.svg"},599:(t,n,e)=>{t.exports=e.p+"f0a5f6c40f5832bf0dea.svg"},862:(t,n,e)=>{t.exports=e.p+"5b2c84c762cd1dc52043.svg"}},t=>{t(t.s=830)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,